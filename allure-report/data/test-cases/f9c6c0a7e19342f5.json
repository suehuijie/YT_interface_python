{
  "uid" : "f9c6c0a7e19342f5",
  "name" : "用例标题：正确用户名，错误密码",
  "fullName" : "testcase.test_set.TestAddress#test_addr_add",
  "historyId" : "11aaf27a79185dc927467199c24a6d19",
  "time" : {
    "start" : 1628560917453,
    "stop" : 1628560917872,
    "duration" : 419
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'countryName:...edValue: null' == 'countryName:...edValue: null'\n  - countryName: 国家名称不能为空, rejectedValue: null\n  + countryName:...edValue: null",
  "statusTrace" : "self = <test_set.TestAddress object at 0x0000000003FC93C8>\ntest_input = {'mobile': '18509251761', 'name': 'sue1'}\nexpected = {'message': 'countryName:...edValue: null', 'status': 200}\ntitle = '正确用户名，错误密码'\nyt_headers = {'authorization': 'Bearer 2e79398e-bec3-42bc-b0ad-b0c48011862d', 'content-type': 'application/json'}\nuserId = 500000560\n\n    @allure.story(\"新增地址接口\")\n    @allure.title(\"用例标题：{title}\")\n    @pytest.mark.parametrize(\"test_input, expected, title\", test_data['set']['address_data'])\n    def test_addr_add(self, test_input, expected, title, yt_headers, userId):\n        addrcount_before = self.sql_exec.select_one(self.sql['address']['count'].format(userId))\n        self.log.info(\"新增地址前，查询sql数据结果为{}\".format(addrcount_before[0]))\n    \n        response = requests.post(url=self.url_data['address']['add_addr'],\n                                 headers = yt_headers,\n                                 json=test_input)\n        self.log.info(\"接口响应数据结果为{}\".format(response.json()))\n    \n        addrcount_after = self.sql_exec.select_one(self.sql['address']['count'].format(userId))\n        self.log.info(\"新增地址后，查询sql数据结果为{}\".format(addrcount_after[0]))\n    \n>       assert response.json()['message'] == expected['message']\nE       AssertionError: assert 'countryName:...edValue: null' == 'countryName:...edValue: null'\nE         - countryName: 国家名称不能为空, rejectedValue: null\nE         + countryName:...edValue: null\n\ntestcase\\test_set.py:83: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "userId",
    "time" : {
      "start" : 1628560911118,
      "stop" : 1628560912162,
      "duration" : 1044
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "yt_headers",
    "time" : {
      "start" : 1628560912163,
      "stop" : 1628560916237,
      "duration" : 4074
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1628560916999,
      "stop" : 1628560916999,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'countryName:...edValue: null' == 'countryName:...edValue: null'\n  - countryName: 国家名称不能为空, rejectedValue: null\n  + countryName:...edValue: null",
    "statusTrace" : "self = <test_set.TestAddress object at 0x0000000003FC93C8>\ntest_input = {'mobile': '18509251761', 'name': 'sue1'}\nexpected = {'message': 'countryName:...edValue: null', 'status': 200}\ntitle = '正确用户名，错误密码'\nyt_headers = {'authorization': 'Bearer 2e79398e-bec3-42bc-b0ad-b0c48011862d', 'content-type': 'application/json'}\nuserId = 500000560\n\n    @allure.story(\"新增地址接口\")\n    @allure.title(\"用例标题：{title}\")\n    @pytest.mark.parametrize(\"test_input, expected, title\", test_data['set']['address_data'])\n    def test_addr_add(self, test_input, expected, title, yt_headers, userId):\n        addrcount_before = self.sql_exec.select_one(self.sql['address']['count'].format(userId))\n        self.log.info(\"新增地址前，查询sql数据结果为{}\".format(addrcount_before[0]))\n    \n        response = requests.post(url=self.url_data['address']['add_addr'],\n                                 headers = yt_headers,\n                                 json=test_input)\n        self.log.info(\"接口响应数据结果为{}\".format(response.json()))\n    \n        addrcount_after = self.sql_exec.select_one(self.sql['address']['count'].format(userId))\n        self.log.info(\"新增地址后，查询sql数据结果为{}\".format(addrcount_after[0]))\n    \n>       assert response.json()['message'] == expected['message']\nE       AssertionError: assert 'countryName:...edValue: null' == 'countryName:...edValue: null'\nE         - countryName: 国家名称不能为空, rejectedValue: null\nE         + countryName:...edValue: null\n\ntestcase\\test_set.py:83: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7da75165d1e3dd05",
      "name" : "log",
      "source" : "7da75165d1e3dd05.txt",
      "type" : "text/plain",
      "size" : 591
    }, {
      "uid" : "bab1b564d5f64246",
      "name" : "stderr",
      "source" : "bab1b564d5f64246.txt",
      "type" : "text/plain",
      "size" : 384
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1628560918732,
      "stop" : 1628560918732,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "地址管理"
  }, {
    "name" : "story",
    "value" : "新增地址接口"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('userId')"
  }, {
    "name" : "suite",
    "value" : "test_set"
  }, {
    "name" : "subSuite",
    "value" : "TestAddress"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "host",
    "value" : "DESKTOP-M0PGOTF"
  }, {
    "name" : "thread",
    "value" : "20020-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython2"
  }, {
    "name" : "package",
    "value" : "testcase.test_set"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected",
    "value" : "{'status': 200, 'message': 'countryName:...edValue: null'}"
  }, {
    "name" : "test_input",
    "value" : "{'mobile': '18509251761', 'name': 'sue1'}"
  }, {
    "name" : "title",
    "value" : "'正确用户名，错误密码'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('userId')" ]
  },
  "source" : "f9c6c0a7e19342f5.json",
  "parameterValues" : [ "{'status': 200, 'message': 'countryName:...edValue: null'}", "{'mobile': '18509251761', 'name': 'sue1'}", "'正确用户名，错误密码'" ]
}